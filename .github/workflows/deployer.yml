name: CI CD

on:
  push:
    branches: [main]

jobs:
  infra:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: "set up google cloud sdk"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: "create gcs bucket for twilio function code"
        continue-on-error: true
        run: "gcloud storage buckets create gs://${{vars.TWILIO_SOURCE_GCS}}"

      - name: "create gcs bucket for generate function code"
        continue-on-error: true
        run: "gcloud storage buckets create gs://${{vars.GENERATE_SOURCE_GCS}}"

      - name: "create gcs bucket for serve function code"
        continue-on-error: true
        run: "gcloud storage buckets create gs://${{vars.SERVE_SOURCE_GCS}}"

      - name: "create gcs bucket for speech2text function code"
        continue-on-error: true
        run: "gcloud storage buckets create gs://${{vars.SPEECH2TEXT_SOURCE_GCS}}"

      - name: "create public gcs bucket for twilio images"
        continue-on-error: true
        run:
          gcloud storage buckets create gs://${{vars.TWILIO_IMAGES}} --location=${{vars.LOCATION}};
          gcloud storage buckets add-iam-policy-binding gs://${{vars.TWILIO_IMAGES}} --member=allUsers --role=roles/storage.objectViewer

      - name: "create public gcs bucket for uploaded images"
        continue-on-error: true
        run:
          gcloud storage buckets create gs://${{vars.IMAGES_GCS}} --location=${{vars.LOCATION}};
          gcloud storage buckets add-iam-policy-binding gs://${{vars.IMAGES_GCS}} --member=allUsers --role=roles/storage.objectViewer

      - name: "create public gcs bucket for html front end"
        continue-on-error: true
        run: gcloud storage buckets create gs://${{vars.HOST}};
          gcloud storage buckets add-iam-policy-binding gs://${{vars.HOST}} --member=allUsers --role=roles/storage.objectViewer

      - name: "create public gcs bucket for uploaded audio files for speech2text"
        continue-on-error: true
        run:
            gcloud storage buckets create gs://${{vars.SPEECH2TEXT_GCS}} --location=${{vars.LOCATION}};
            gcloud storage buckets add-iam-policy-binding gs://${{vars.SPEECH2TEXT_GCS}} --member=allUsers --role=roles/storage.objectViewer
      
      - name: "add iam publisher role to gcs"
        continue-on-error: true
        run:
          SERVICE_ACCOUNT=$(gsutil kms serviceaccount -p ${{secrets.PROJECT}});
          gcloud projects add-iam-policy-binding ${{secrets.PROJECT}} --member="serviceAccount:$SERVICE_ACCOUNT" --role='roles/pubsub.publisher'

      - name: "create firestore default database"
        continue-on-error: true
        run: gcloud firestore databases create --location=nam5

      - name: "create firestore index for pictionary gemini-demo-images collection"
        continue-on-error: true
        run: gcloud firestore indexes composite create --collection-group=gemini-demo-images --field-config=field-path=timeStamp,order=descending --field-config=field-path=imageDescription,order=ascending

      - name: "create firestore index for pictionary gemini-demo-text collection"
        continue-on-error: true
        run: gcloud firestore indexes composite create --collection-group=gemini-demo-text --field-config=field-path=user,order=ascending --field-config=field-path=timeStamp,order=descending

      - name: "create firestore index for pictionary gemini-demo-text-result collection"
        continue-on-error: true
        run: gcloud firestore indexes composite create --collection-group=gemini-demo-text-result --field-config=field-path=timeStamp,order=descending --field-config=field-path=fileName,order=descending

      - name: "create firestore index for speech2text gemini-demo-speech2text-summary collection"
        continue-on-error: true
        run: gcloud firestore indexes composite create --collection-group=gemini-demo-speech2text-summary --field-config=field-path=timeStamp,order=descending --field-config=field-path=fileName,order=descending

  build:
    runs-on: ubuntu-latest
    needs: infra

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: "upload generate directory as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: code-directory-generate
          path: generate

      - name: "upload serve directory as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: code-directory-serve
          path: serve

      - name: "upload twilio directory as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: code-directory-twilio
          path: twilio

      - name: "upload speech2text directory as artifact"
        uses: actions/upload-artifact@v3
        with:
            name: code-directory-speech2text
            path: speech2text

      - name: "upload html artifact to google cloud storage"
        uses: "google-github-actions/upload-cloud-storage@v1"
        with:
          path: "web"
          destination: ${{vars.HOST}}
          gzip: false

      - name: "upload generate artifact to google cloud storage"
        uses: "google-github-actions/upload-cloud-storage@v1"
        with:
          path: "generate"
          destination: ${{vars.GENERATE_SOURCE_GCS}}
          gzip: true

      - name: "upload serve artifact to google cloud storage"
        uses: "google-github-actions/upload-cloud-storage@v1"
        with:
          path: "serve"
          destination: ${{vars.SERVE_SOURCE_GCS}}
          gzip: true

      - name: "upload twilio artifact to google cloud storage"
        uses: "google-github-actions/upload-cloud-storage@v1"
        with:
          path: "twilio"
          destination: ${{vars.TWILIO_SOURCE_GCS}}
          gzip: true
      - name: "upload speech2text artifact to google cloud storage"
        uses: "google-github-actions/upload-cloud-storage@v1"
        with:
          path: "speech2text"
          destination: ${{vars.SPEECH2TEXT_SOURCE_GCS}}
          gzip: true

  deploy-generate:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: "set up google cloud sdk"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: "copy source code directory"
        run: "gsutil cp -r gs://${{vars.GENERATE_SOURCE_GCS}}/generate ."

      - name: "list files"
        run: "cd generate; ls"

      - name: "zip source code files"
        run: "cd generate; ls; zip generate.zip *"

      - name: "upload source code"
        run: "gsutil cp generate/generate.zip gs://${{vars.GENERATE_SOURCE_GCS}}"

      - name: "deploy cloud function using gcloud"
        continue-on-error: false
        run:
          "gcloud  functions deploy gemini-example --region=${{vars.LOCATION}} \
          --runtime=python39 --gen2 --entry-point=main \
          --trigger-bucket=${{vars.IMAGES_GCS}} \
          --min-instances=1 \
          --memory=2Gi \
          --set-env-vars=PROJECT=${{secrets.PROJECT}},LOCATION=${{vars.LOCATION}} \
          --source=gs://${{vars.GENERATE_SOURCE_GCS}}/generate.zip"

  deploy-serve:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: "set up google cloud sdk"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: "copy source code directory"
        run: "gsutil cp -r gs://${{vars.SERVE_SOURCE_GCS}}/serve ."

      - name: "list files"
        run: "cd serve; ls"

      - name: "zip source code files"
        run: "cd serve; ls; zip serve.zip *"

      - name: "upload source code"
        run: "gsutil cp serve/serve.zip gs://${{vars.SERVE_SOURCE_GCS}}"

      - name: "deploy cloud function using gcloud"
        continue-on-error: false
        run:
          "gcloud  functions deploy gemini-example-serve --region=${{vars.LOCATION}} \
          --runtime=python39 --gen2 --entry-point=main \
          --trigger-http \
          --allow-unauthenticated \
          --min-instances=1 \
          --source=gs://${{vars.SERVE_SOURCE_GCS}}/serve.zip"

  deploy-twilio:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: "set up google cloud sdk"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: "copy source code directory"
        run: "gsutil cp -r gs://${{vars.TWILIO_SOURCE_GCS}}/twilio ."

      - name: "list files"
        run: "cd twilio; ls"

      - name: "zip source code files"
        run: "cd twilio; ls; zip twilio.zip *"

      - name: "upload source code"
        run: "gsutil cp twilio/twilio.zip gs://${{vars.TWILIO_SOURCE_GCS}}"

      - name: "deploy cloud function using gcloud"
        run:
          "gcloud  functions deploy twilio-endpoint --region=${{vars.LOCATION}} \
          --runtime=python39 --gen2 --entry-point=main \
          --trigger-http \
          --allow-unauthenticated \
          --min-instances=1 \
          --memory=1Gi \
          --source=gs://${{vars.TWILIO_SOURCE_GCS}}/twilio.zip \
          --set-env-vars HMAC_VAL=${{secrets.HMAC}} \
          --set-env-vars PROJECT=${{secrets.PROJECT}} \
          --set-env-vars GCS_BUCKET=${{vars.TWILIO_IMAGES}} \
          --set-env-vars LOCATIONS=${{vars.LOCATIONS}}"

  deploy-speech2text:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: "set up google cloud sdk"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: "copy source code directory"
        run: "gsutil cp -r gs://${{vars.SPEECH2TEXT_SOURCE_GCS}}/speech2text ."

      - name: "list files"
        run: "cd speech2text; ls"

      - name: "zip source code files"
        run: "cd speech2text; ls; zip speech2text.zip *"

      - name: "upload source code"
        run: "gsutil cp speech2text/speech2text.zip gs://${{vars.SPEECH2TEXT_SOURCE_GCS}}"

      - name: "deploy cloud function using gcloud"
        continue-on-error: false
        run:
          "gcloud  functions deploy gemini-example --region=${{vars.LOCATION}} \
          --runtime=python39 --gen2 --entry-point=main \
          --trigger-bucket=${{vars.SPEECH2TEXT_GCS}} \
          --min-instances=1 \
          --memory=2Gi \
          --set-env-vars=PROJECT=${{secrets.PROJECT}},LOCATION=${{vars.LOCATION}} \
          --source=gs://${{vars.SPEECH2TEXT_SOURCE_GCS}}/speech2text.zip"